#!/usr/bin/env python3
"""
Test script to verify BIRD configurations for each node
"""
import json

# Load service discovery config
with open('service-discovery-schema.json', 'r') as f:
    config = json.load(f)

nodes = config["wireguard_config"]["node_assignments"]

def generate_bird_config_for_node(node_id, node_config):
    """Generate what the BIRD config will look like for a given node"""
    
    # Simulate the variables that cloud-init will have
    EXTERNAL_IP = node_config["vultr_endpoint"].split(":")[0]
    NODE_ID = node_id
    ROLE = node_config["role"] 
    WG_IPV4 = node_config["ipv4"]
    WG_IPV6 = node_config["ipv6"]
    
    print(f"\n{'='*60}")
    print(f"BIRD Configuration for {NODE_ID.upper()} ({ROLE})")
    print(f"External IP: {EXTERNAL_IP}")
    print(f"WireGuard: {WG_IPV4}, {WG_IPV6}")
    print(f"{'='*60}")
    
    # Main BIRD config
    bird_conf = f"""# BIRD Internet Routing Daemon Configuration
# {NODE_ID} server ({ROLE}) - Generated by Service Discovery

include "/etc/bird/bgp_filters.conf";

# Logging
log syslog all;
log stderr all;

# Force router ID to external IP
router id {EXTERNAL_IP};

# Basic protocols
protocol device {{
  scan time 10;
}}

protocol direct {{
  ipv4;
  ipv6;
  interface "dummy*";
}}

protocol kernel {{
  ipv4 {{
    export where source = RTS_BGP && net != 0.0.0.0/0 && net != ::/0;
  }};
  learn;
}}

protocol kernel {{
  ipv6 {{
    export where source = RTS_BGP && net != 0.0.0.0/0 && net != ::/0;
  }};
  learn;
}}

# Include static routes for anycast prefixes
include "/etc/bird/static.conf";

# Include Vultr BGP configuration
include "/etc/bird/vultr.conf";

# Include iBGP configuration
include "/etc/bird/ibgp.conf";
"""

    print("=== /etc/bird/bird.conf ===")
    print(bird_conf)
    
    # Vultr BGP config
    vultr_conf = f"""# Vultr BGP Configuration

define VULTR_ASN = 64515;
define OUR_ASN = 27218;
define LOCAL_IP = {EXTERNAL_IP};

protocol bgp vultr4 {{
  description "Vultr IPv4 BGP";
  local as OUR_ASN;
  source address LOCAL_IP;
  neighbor 169.254.169.254 as VULTR_ASN;
  multihop 2;
  password "xV72GUaFMSYxNmee";
  ipv4 {{
    import none;
    export filter {{
      if net = 192.30.120.0/23 then accept;
      reject;
    }};
    next hop self;
  }};
}}

protocol bgp vultr6 {{
  description "Vultr IPv6 BGP";
  local as OUR_ASN;
  source address LOCAL_IP;
  neighbor 2001:19f0:ffff::1 as VULTR_ASN;
  multihop 2;
  password "xV72GUaFMSYxNmee";
  ipv6 {{
    import none;
    export filter {{
      if net = 2620:71:4000::/48 then accept;
      reject;
    }};
    next hop self;
  }};
}}
"""
    
    print("=== /etc/bird/vultr.conf ===")
    print(vultr_conf)
    
    # iBGP configuration
    if ROLE == "route_reflector":
        # LAX is route reflector
        ibgp_conf = f"""# iBGP Configuration for route reflector (LAX)

define SELF_ASN = 27218;
define LAX_WG_IP = 10.10.10.1;
define ORD_WG_IP = 10.10.10.2;
define MIA_WG_IP = 10.10.10.3;
define EWR_WG_IP = 10.10.10.4;

protocol bgp ibgp_ord {{
  local as SELF_ASN;
  source address LAX_WG_IP;
  neighbor ORD_WG_IP as SELF_ASN;
  description "iBGP to ORD via WireGuard";
  rr client;
  rr cluster id 1;
  hold time 240;
  keepalive time 80;
  ipv4 {{
    import filter ibgp_import;
    export filter ibgp_export;
    next hop self;
  }};
  ipv6 {{
    import filter ibgp_import;
    export filter ibgp_export;
    next hop self;
  }};
}}

protocol bgp ibgp_mia {{
  local as SELF_ASN;
  source address LAX_WG_IP;
  neighbor MIA_WG_IP as SELF_ASN;
  description "iBGP to MIA via WireGuard";
  rr client;
  rr cluster id 1;
  hold time 240;
  keepalive time 80;
  ipv4 {{
    import filter ibgp_import;
    export filter ibgp_export;
    next hop self;
  }};
  ipv6 {{
    import filter ibgp_import;
    export filter ibgp_export;
    next hop self;
  }};
}}

protocol bgp ibgp_ewr {{
  local as SELF_ASN;
  source address LAX_WG_IP;
  neighbor EWR_WG_IP as SELF_ASN;
  description "iBGP to EWR via WireGuard";
  rr client;
  rr cluster id 1;
  hold time 240;
  keepalive time 80;
  ipv4 {{
    import filter ibgp_import;
    export filter ibgp_export;
    next hop self;
  }};
  ipv6 {{
    import filter ibgp_import;
    export filter ibgp_export;
    next hop self;
  }};
}}
"""
    else:
        # Client nodes connect to LAX
        ibgp_conf = f"""# iBGP Configuration for client node ({NODE_ID})

define SELF_ASN = 27218;
define {NODE_ID.upper()}_WG_IP = {WG_IPV4};
define LAX_WG_IP = 10.10.10.1;

protocol bgp ibgp_lax {{
  local as SELF_ASN;
  source address {NODE_ID.upper()}_WG_IP;
  neighbor LAX_WG_IP as SELF_ASN;
  description "iBGP to LAX (route reflector) via WireGuard";
  hold time 240;
  keepalive time 80;
  ipv4 {{
    import filter ibgp_import;
    export filter ibgp_export;
    next hop self;
  }};
  ipv6 {{
    import filter ibgp_import;
    export filter ibgp_export;
    next hop self;
  }};
}}
"""
    
    print("=== /etc/bird/ibgp.conf ===")
    print(ibgp_conf)
    
    # Static routes (same for all)
    static_conf = """# Static routes for our announced prefixes

protocol static {
  ipv4;
  route 192.30.120.0/23 blackhole;
}

protocol static {
  ipv6;
  route 2620:71:4000::/48 blackhole;
}
"""
    
    print("=== /etc/bird/static.conf ===")
    print(static_conf)
    
    # BGP filters (same for all) 
    bgp_filters = """# BGP Import/Export Filters - BLOCK ALL DEFAULT ROUTES

filter ibgp_import {
  # REJECT any default routes first  
  if net = 0.0.0.0/0 then reject;
  if net = ::/0 then reject;
  
  # Accept our IPv4 prefix
  if net = 192.30.120.0/23 then accept;
  # Accept our IPv6 prefix  
  if net = 2620:71:4000::/48 then accept;
  
  # Reject everything else
  reject;
}

filter ibgp_export {
  # NEVER export default routes
  if net = 0.0.0.0/0 then reject;
  if net = ::/0 then reject;
  
  # Export our IPv4 prefix
  if net = 192.30.120.0/23 then accept;
  # Export our IPv6 prefix
  if net = 2620:71:4000::/48 then accept;
  
  # Reject everything else
  reject;
}
"""
    
    print("=== /etc/bird/bgp_filters.conf ===")
    print(bgp_filters)

# Test all nodes
for node_id, node_config in nodes.items():
    generate_bird_config_for_node(node_id, node_config)