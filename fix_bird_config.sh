#!/bin/bash
# fix_bird_config.sh - Repairs broken BIRD configurations

set -e

# Configuration
SSH_KEY_PATH="$HOME/.ssh/id_ed25519_nt_infinitum-nihil_com"  # Using correct key for nt@infinitum-nihil.com

# Server details
declare -A SERVER_IPS=(
  ["lax"]="149.248.2.74"
  ["ewr"]="66.135.18.138"
  ["mia"]="149.28.108.180"
  ["ord"]="66.42.113.101"
)

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Define WireGuard IPs for each server
declare -A WG_IPS=(
  ["lax"]="1"  # Primary - Los Angeles (HQ)
  ["ord"]="2"  # Secondary - Chicago (closest to LA)
  ["mia"]="3"  # Tertiary - Miami (farther from LA)
  ["ewr"]="4"  # Quaternary - Newark (farthest from LA)
)

# Function to fix BIRD configuration
fix_bird_config() {
  local server=$1
  local ip=${SERVER_IPS[$server]}
  local wg_id=${WG_IPS[$server]}
  
  echo -e "${BLUE}Fixing BIRD configuration on $server ($ip)...${NC}"
  
  # Create a temporary file with the proper configuration
  local temp_config=$(mktemp)
  
  # Generate the configuration content
  cat > "$temp_config" << EOL
# BIRD Internet Routing Daemon Configuration
# Generated by fix_bird_config.sh

# Logging
log syslog all;
log stderr all; 

# Set specific router IDs based on WireGuard IPs
# LAX = 10.10.10.1, ORD = 10.10.10.2, MIA = 10.10.10.3, EWR = 10.10.10.4
router id 10.10.10.$wg_id;

# Basic protocols
protocol device {
  scan time 10;
}

protocol direct {
  ipv4;
  ipv6;
}

protocol kernel {
  ipv4 {
    export all;
  };
  learn;
}

protocol kernel {
  ipv6 {
    export all;
  };
  learn;
}

# Include iBGP configuration
include "/etc/bird/ibgp.conf";
EOL

  # Upload the configuration
  scp -i "$SSH_KEY_PATH" "$temp_config" "root@$ip:/etc/bird/bird.conf"
  
  # Remove the temporary file
  rm "$temp_config"

  # Create iBGP configuration
  if [ "$server" = "lax" ]; then
    # LAX is the route reflector
    local ibgp_config="# iBGP Configuration for mesh network
# LAX is the route reflector (10.10.10.1)

define SELF_ASN = 27218;

template bgp ibgp_clients {
  local as SELF_ASN;
  rr client;
  rr cluster id 1;
  direct;
  ipv4 {
    import all;
    export all;
    next hop self;
  };
}
"
    
    # Add client configurations
    for peer in "${!SERVER_IPS[@]}"; do
      if [ "$peer" != "lax" ]; then
        local peer_wg_id=${WG_IPS[$peer]}
        
        ibgp_config+="
protocol bgp ibgp_${peer} {
  local as SELF_ASN;
  neighbor 10.10.10.$peer_wg_id as SELF_ASN;
  description \"iBGP to ${peer}\";
  rr client;
  rr cluster id 1;
  direct;
  ipv4 {
    import all;
    export all;
    next hop self;
  };
}
"
      fi
    done
    
    # Upload the iBGP configuration
    echo "$ibgp_config" | ssh -i "$SSH_KEY_PATH" "root@$ip" "cat > /etc/bird/ibgp.conf"
  else
    # Non-route-reflector configuration (client)
    local ibgp_config="# iBGP Configuration for mesh network
# Client configuration pointing to LAX as route reflector (10.10.10.1)

define SELF_ASN = 27218;

protocol bgp ibgp_rr {
  local as SELF_ASN;
  neighbor 10.10.10.1 as SELF_ASN;
  direct;
  ipv4 {
    import all;
    export all;
    next hop self;
  };
  description \"iBGP to Route Reflector (LAX)\";
}
"
    
    # Upload the iBGP configuration
    echo "$ibgp_config" | ssh -i "$SSH_KEY_PATH" "root@$ip" "cat > /etc/bird/ibgp.conf"
  fi
  
  # Restart BIRD on the server
  ssh -i "$SSH_KEY_PATH" "root@$ip" "
    # Create run directory if it doesn't exist
    mkdir -p /run/bird
    chown bird:bird /run/bird || true
    
    # Set permissions
    chmod 640 /etc/bird/bird.conf
    chmod 640 /etc/bird/ibgp.conf
    chown -R bird:bird /etc/bird
    
    # Try to restart BIRD
    systemctl stop bird || true
    systemctl start bird
    
    # Check if BIRD is running
    if systemctl is-active bird &> /dev/null; then
      echo 'BIRD successfully restarted!'
      
      # Check BGP sessions
      echo 'BGP sessions:'
      birdc show protocols | grep -E 'ibgp|vultr' || echo 'No BGP sessions found'
    else
      echo 'BIRD failed to start:'
      systemctl status bird
    fi
  "
}

# Main function
main() {
  echo -e "${BLUE}Starting BIRD configuration repair...${NC}"
  
  for server in "${!SERVER_IPS[@]}"; do
    fix_bird_config "$server"
  done
  
  echo -e "${GREEN}BIRD configuration repair completed!${NC}"
  echo -e "${YELLOW}WireGuard IP assignments:${NC}"
  echo -e "  LAX (primary): 10.10.10.1"
  echo -e "  ORD (secondary): 10.10.10.2"
  echo -e "  MIA (tertiary): 10.10.10.3"
  echo -e "  EWR (quaternary): 10.10.10.4"
  echo -e "${YELLOW}To verify connectivity and BGP sessions, run:${NC} bash check_bgp_sessions.sh"
}

# Run the main function
main